{"ast":null,"code":"import { CHANGE_SEARCHFIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAIL } from './constants.js';\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCHFIELD,\n  payload: text\n});\nexport const requestRobots = dispatch => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  });\n  fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(data => dispatch({\n    type: REQUEST_ROBOTS_SUCCESS,\n    payload: data\n  })).catch(err => dispatch({\n    type: REQUEST_ROBOTS_FAIL,\n    payload: err\n  }));\n};","map":{"version":3,"sources":["/Users/agnieszka/Desktop/Project - Self/Zero To Mastery/RoboFriends/src/action.js"],"names":["CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAIL","setSearchField","text","type","payload","requestRobots","dispatch","fetch","then","response","json","data","catch","err"],"mappings":"AAAA,SACCA,kBADD,EAECC,sBAFD,EAGCC,sBAHD,EAICC,mBAJD,QAKO,gBALP;AAOA,OAAO,MAAMC,cAAc,GAAIC,IAAD,KAAW;AACxCC,EAAAA,IAAI,EAAEN,kBADkC;AAExCO,EAAAA,OAAO,EAAEF;AAF+B,CAAX,CAAvB;AAKP,OAAO,MAAMG,aAAa,GAAIC,QAAD,IAAc;AAC1CA,EAAAA,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAAEL;AAAP,GAAD,CAAR;AACAS,EAAAA,KAAK,CAAC,4CAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,IAAI,IAAIL,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEJ,sBAAR;AAAgCK,IAAAA,OAAO,EAAEO;AAAzC,GAAD,CAFtB,EAGCC,KAHD,CAGOC,GAAG,IAAIP,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEH,mBAAR;AAA6BI,IAAAA,OAAO,EAAES;AAAtC,GAAD,CAHtB;AAIA,CANM","sourcesContent":["import { \n\tCHANGE_SEARCHFIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAIL\n} from './constants.js'\n\nexport const setSearchField = (text) => ({\n\ttype: CHANGE_SEARCHFIELD,\n\tpayload: text\n})\n\nexport const requestRobots = (dispatch) => {\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t.then(response => response.json())\n\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n\t.catch(err => dispatch({ type: REQUEST_ROBOTS_FAIL, payload: err}))\n}"]},"metadata":{},"sourceType":"module"}